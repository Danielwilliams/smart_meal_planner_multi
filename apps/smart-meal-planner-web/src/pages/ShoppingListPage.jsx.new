import React, { useEffect, useState } from 'react';
import { useNavigate, useLocation, useParams, useSearchParams } from 'react-router-dom';
import { generateSimpleShoppingList } from '../utils/simpleShoppingList';
import { 
  Container, 
  Typography, 
  Select, 
  MenuItem, 
  FormControl, 
  InputLabel, 
  Box, 
  Paper, 
  Grid,
  Button,
  CircularProgress,
  Alert,
  Snackbar,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  Card,
  CardContent,
  Divider,
  Chip,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Tabs,
  Tab,
  IconButton,
  Tooltip,
  Badge,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Switch,
  FormGroup,
  FormControlLabel,
} from '@mui/material';

// Import your existing component code here...

// Replace the generateNewAiList function with this:

  const generateNewAiList = async () => {
    // Reset state and show loading indicator
    setGenerationLogs([]);
    setGenerationStats(null);
    setAiShoppingLoading(true);
    const startTime = new Date();

    // Simple logging helper
    const addLog = (message, type = 'info') => {
      const timestamp = new Date().toLocaleTimeString();
      console.log(`[AI List] ${timestamp} - ${message}`);
      setGenerationLogs(prev => [...prev, { timestamp, message, type }]);
    };

    try {
      // Log start
      addLog(`Starting simple AI shopping list generation for menu ID: ${selectedMenuId}`);
      
      // Get menu data to send to our simplified generator
      if (!selectedMenuId) {
        throw new Error("No menu selected");
      }
      
      // Use the menu data we already have in state if available
      let menuData = groceryList;
      
      // If needed, fetch the menu data first
      if (!menuData || Object.keys(menuData).length === 0) {
        addLog('No menu data in state, fetching from API', 'info');
        
        try {
          const response = await fetch(`https://smartmealplannermulti-production.up.railway.app/menu/${selectedMenuId}`, {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
          });
          
          if (!response.ok) {
            throw new Error(`Error fetching menu: ${response.status}`);
          }
          
          menuData = await response.json();
          addLog('Menu data fetched successfully', 'success');
        } catch (error) {
          addLog(`Error fetching menu: ${error.message}`, 'error');
          // Continue with what data we have
        }
      }
      
      // Generate the shopping list using our new simple implementation
      addLog('Generating simplified shopping list...', 'info');
      const result = await generateSimpleShoppingList(menuData);
      
      // Update UI with the result
      addLog('Shopping list generated successfully', 'success');
      
      // Calculate stats
      const endTime = new Date();
      const durationSeconds = (endTime - startTime) / 1000;
      
      // Log some stats about what we got back
      if (result.groceryList) {
        addLog(`Generated ${result.groceryList.length} categories`, 'info');
        
        // Log some sample items
        const totalItems = result.groceryList.reduce((count, category) => 
          count + category.items.length, 0);
        addLog(`Total items: ${totalItems}`, 'info');
        
        // Get a sample of items
        const sampleItems = [];
        for (let i = 0; i < Math.min(3, result.groceryList.length); i++) {
          const category = result.groceryList[i];
          if (category.items?.length > 0) {
            sampleItems.push(`${category.items[0].name}`);
          }
        }
        if (sampleItems.length > 0) {
          addLog(`Sample items: ${sampleItems.join(', ')}`, 'info');
        }
      }
      
      // Update state with the result
      setAiShoppingData(result);
      
      // Cache the result
      try {
        localStorage.setItem(
          `${AI_SHOPPING_CACHE_KEY}_${selectedMenuId}`,
          JSON.stringify({
            ...result,
            cache_time: new Date().toISOString()
          })
        );
        addLog('Updated local cache with new data', 'info');
      } catch (cacheError) {
        addLog(`Error updating cache: ${cacheError.message}`, 'warning');
      }
      
      // Update stats
      setGenerationStats({
        startTime,
        endTime,
        duration: durationSeconds,
        success: true,
        responseSize: JSON.stringify(result).length
      });
      
      addLog(`Generation completed in ${durationSeconds.toFixed(2)} seconds`, 'success');
      showSnackbar('New AI shopping list generated successfully');
      
    } catch (error) {
      addLog(`Error: ${error.message}`, 'error');
      
      // Update stats with error
      const endTime = new Date();
      setGenerationStats({
        startTime,
        endTime,
        duration: (endTime - startTime) / 1000,
        success: false,
        error: error.message
      });
      
      showSnackbar(`Error: ${error.message}`);
    } finally {
      setAiShoppingLoading(false);
    }
  };